AWSTemplateFormatVersion: '2010-09-09'
Description: Kong CloudFormation template. Creates load balanced Kong instances (cluster)
  using existing Postgres RDS instance in an existing VPC.
Parameters:
  # Kong Instance Config
  KongVersion:
    Description: Kong Version
    Type: String
    Default: 0.14.1
    AllowedValues:
    - 0.14.1
  KongKeyName:
    Description: Required - Name of an existing EC2 KeyPair to enable SSH access to
      the instances for Kong
    Type: AWS::EC2::KeyPair::KeyName
    Default: ''
  KongInstanceType:
    Description: 'Kong EC2 instance type'
    Type: String
    Default: t2.small
    AllowedValues:
    - t2.small
    - t2.micro
    - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Required - Existing Private VPC Subnets where RDS instance(s) are running.
    Default: ''
  SecurityGroupForSSH:
    Description: Optional - Security group which is allowed SSH access to Kong instances
    Type: AWS::EC2::SecurityGroup::Id

  # Kong Fleet Config
  KongFleetMinSize:
    Description: Min Number of Kong instances
    Type: Number
    Default: '1'
    MinValue: '0'
  KongFleetMaxSize:
    Description: Max Number of Kong instances
    Type: Number
    Default: '1'
    MinValue: '1'
  KongFleetDesiredSize:
    Description: Desired Number of Kong instances
    Type: Number
    Default: '1'
    MinValue: '0'
  HardDriveSize:
    Description: The root volume size in GB for Kong nodes (volume type=gp2)
    Type: Number
    Default: '20'
    MinValue: '20'
  ELBSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Required - Existing Subnets in which ELB instances will run. (public)
    Default: ''
  KongProxyAccess:
    Description: The IP address range that can be used to access the Kong proxy
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  KongAdminAccessEnabled:
    Default: 'yes'
    Description: Allow public access to Kong Admin
    Type: String
    AllowedValues:
    - 'yes'
    - 'no'
  KongAdminPort:
    Description: The port at which to expose the Kong Admin dashboard
    Type: String
    Default: '8001'
    MinLength: '2'
    MaxLength: '6'
    AllowedPattern: (\d{2,6})
    ConstraintDescription: must be a valid port
  KongAdminAccess:
    Description: The IP address range that can be used to access the Kong Admin port (8001)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  KongAdminAccessSecondary:
    Description: A secondary IP address range that can be used to access the Kong Admin port
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  # Alarms Configuration
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Required - VPC Id of existing VPC

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "Kong Instance Configuration"
      Parameters:
      - KongVersion
      - KongKeyName
      - KongInstanceType
      - SubnetIds
      - SecurityGroupForSSH
      - HardDriveSize
    - Label:
        default: "Kong Fleet Configuration"
      Parameters:
      - KongFleetMinSize
      - KongFleetMaxSize
      - KongFleetDesiredSize
    # - Label:
    #     default: "Kong Postgres Configuration"
    #   Parameters:
    #   - DBHost
    #   - DBPort
    #   - DBName
    #   - DBUsername
    #   - DBPassword
    #   - DBClass
    #   - DBVersion
    #   - DBMultiAZ
    #   - DBStorageType
    #   - DBAllocatedStorage
    #   - DBStorageEncrypted
    - Label:
        default: "Load Balancer Configuration"
      Parameters:
      - ELBSubnetIds
      - KongProxyAccess
      - KongAdminAccessEnabled
      - KongAdminPort
      - KongAdminAccess
      - KongAdminAccessSecondary
      Parameters:
      - VpcId

    ParameterLabels:
      VpcId:
        default: "Which VPC should this be deployed to?"
      KongAdminAccessEnabled:
        default: "Enable public access to Kong Admin port?"

Mappings:
  RegionKongAmiMap:
    ca-central-1:
      HVM: ami-e5cc4981
    us-east-1:
      HVM: ami-5583d42f
    us-east-2:
      HVM: ami-976152f2

Conditions:
  CreateAdminIngress: !Equals [!Ref 'KongAdminAccessEnabled', 'yes']
  CreateSecondaryAdminIngress: !And
  - !Not [!Equals [!Ref 'KongAdminAccessSecondary', '0.0.0.0/0']]
  - !Condition CreateAdminIngress
  AllowSSHAccess: !Not [!Equals [!Ref 'SecurityGroupForSSH', '']]

Resources:
  KongRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: ec2-operations
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeTags
            Resource: '*'
  KongInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref 'KongRole'
  # Network Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: 'internet-facing'
      Subnets: !Ref 'ELBSubnetIds'
      Type: 'network'
      Tags:
      - Key: Name
        Value: !Sub 'Kong NLB - ${AWS::StackName}'
  ProxyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'ProxyTargetGroup'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: '443'
      Protocol: TCP
  AdminListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'AdminTargetGroup'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: !Ref 'KongAdminPort'
      Protocol: TCP
  ProxyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-proxy'
      VpcId: !Ref 'VpcId'
      Port: 8443
      Protocol: TCP
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
  AdminTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-admin'
      VpcId: !Ref 'VpcId'
      Port: 8001
      Protocol: TCP
      HealthCheckPort: 8443
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
  KongSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8443'
        ToPort: '8443'
        CidrIp: !Ref 'KongProxyAccess'
  KongAdminIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateAdminIngress
    Properties:
      GroupId: !GetAtt KongSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: '8001'
      ToPort: '8001'
      CidrIp: !Ref 'KongAdminAccess'
  KongAdminIngressSecondary:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateSecondaryAdminIngress
    Properties:
      GroupId: !GetAtt KongSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: '8001'
      ToPort: '8001'
      CidrIp: !Ref 'KongAdminAccessSecondary'
  KongSSHIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: AllowSSHAccess
    Properties:
      GroupId: !GetAtt KongSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      SourceSecurityGroupId: !Ref 'SecurityGroupForSSH'

Outputs:
  ProxyURL:
    Description: Kong Proxy URL
    Value: !Join ['', ['https://', !GetAtt [LoadBalancer, DNSName]]]
  AdminURL:
    Description: Kong Admin URL
    Value: !Join ['', ['http://', !GetAtt [LoadBalancer, DNSName], ':', !Ref 'KongAdminPort']]
  LoadBalancerHostedZoneId:
    Description: Kong Load Balancer's Hosted Zone ID
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerHostedZoneId'
  LoadBalancerDNS:
    Description: Kong Load Balancer's DNS Name
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNSName'